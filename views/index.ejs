<!-- views/index.ejs -->
<!DOCTYPE html>
<html>
  <head>
    <title>Heroes & Hobbies - Comic Book app</title>
  </head>
  <body>
    <h1>Comic Book App - Heroes & Hobbies</h1>

    <!-- Search Form -->
    <form action="/search" method="get">
      <label for="searchTitle">Search by Title:</label>
      <input
        type="text"
        id="searchTitle"
        name="title"
        placeholder="Enter title"
      />
      <label for="searchIssue">Search by Issue:</label>
      <input
        type="text"
        id="searchIssue"
        name="issue"
        placeholder="Enter issue"
      />
      <label for="searchReleaseDate">Search by release_date:</label>
      <input
        type="date"
        id="searchReleaseDate"
        name="release_date"
        placeholder="Enter date"
      />
      <label for="searchArtist">Search by artist:</label>
      <input
        type="text"
        id="searchArtist"
        name="artist"
        placeholder="Enter Artist:"
      />
      <button type="submit">Search</button>
    </form>

    <!-- List of Comics -->
    <ul>
      <% for(let i = 0; i < comic.length; i++) { %>
      <li>
        <a href="/comics<%= comic.id %>">
          <% comic.title %> - <% comic.issue %>
        </a>
      </li>
      <% }; %>
    </ul>

    <!-- FrontEnd JS code-->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
      // Function to handle the "Quick Update" form submission
      function handleQuickUpdateFormSubmit(comic_id) {
        const price = document.getElementById("price-${comic_id}").value;
        const quantity = document.getElementById("quantity-${comic_id}").value;
        const updatedData = {
          price,
          quantity,
        };

        //Send PATCH request to update the comic data
        fetch("/comics/${comic_id}", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => response.json())
          .then((updatedComic) => {
            //Handle the response
            console.log("Comic Updated:", updatedComic);
          })
          .catch((error) => {
            console.error("Error updating comic:", error);
          });
      }

      //Function to attach event listeners to "Quick Update" forms
      function attachQuickUpdateFormListeners() {
        const quickUpdateForms =
          document.querySelectorAll(".quick-update-form");
        quickUpdateForms.forEach((form) => {
          form.addEventListener("submit", (event) => {
            event.preventDefault();
            const comic_id = form.dataset.comic_id;
            handleQuickUpdateFormSubmit(comic_id);
          });
        });
      }

      // Function to fetch all comics from the API
      async function fetchAllComics() {
        try {
          const response = await axios.get("/comics");
          const comics = response.data;

          //Display the list of comics on the UI
          const comicsList = document.getElementById("comics_list");
          comicsList.innerHTML = "";

          comics.forEach((comic) => {
            const listItem = document.createElement("li");
            listItem.innerHTML =
              '<a href="/comics/' +
              comic.id +
              '">' +
              comic.title +
              " - " +
              comic.issue +
              "</a>";
            comicsList.appendChild(listItem);
          });
        } catch (error) {
          console.error("Error fetching comics: ", error);
        }
      }

      //Function to fetch a single comic by ID from the API
      async function fetchSingleComic(comic_id) {
        try {
          const response = await axios.get("/comics/${comic_id}");
          const comic = response.data;

          //Display the detailed info about the comic on the UI
          const comicDetailsContainer =
            document.getElementById("comic_details");
          comicDetailsContainer.innerHTML = `
            <h2>${comic.title} - ${comic.issue}</h2>
            <p><strong>Artist:</strong> ${comic.artist}</p>
            <p><strong>Price:</strong> ${comic.price}</p>
            <p><strong>Description:</strong> ${comic.description}</p>
            <p><strong>Quantity:</strong> ${comic.quantity}</p>
          `;
        } catch (error) {
          console.error("Error fetching comic by ID: ", error);
        }
      }

      //Function to handle the search form submission
      async function handleSearchFormSubmit(event) {
        event.preventDefault();
        const searchTitle = document.getElementById("searchTitle").value;
        const searchIssue = document.getElementById("searchIssue").value;
        const searchReleaseDate =
          document.getElementById("searchReleaseDate").value;
        const searchArtist = document.getElementById("searchArtist").value;

        //Construct the API endpoint URL with search parameters
        let apiURL = "/comics";
        if (searchTitle) apiURL += "?title=${searchTitle}";
        if (searchIssue) apiURL += "?title=${searchIssue}";
        if (searchReleaseDate) apiURL += "?title=${searchReleaseDate}";
        if (searchArtist) apiURL += "?title=${searchArtist}";

        try {
          const response = await axios.get(apiURL);
          const comics = response.data;

          //Display the filtered list of comics on the UI
          const comicsList = document.getElementById("comics_list");
          comicsList.innerHTML = "";

          comics.forEach((comic) => {
            const listItem = document.createElement("li");
            listItem.innerHTML =
              '<a href="/comics/' +
              comic.id +
              '">' +
              comic.title +
              " - " +
              comic.issue +
              "</a>";
            comicsList.appendChild(listItem);
          });
        } catch (error) {
          console.error("Error fetching filtered comics: ", error);
        }
      }

      //Function to attach event listeners to the search form
      function attachSearchFormListener() {
        const searchForm = document.getElementById("search_form");
        searchForm.addEventListener("submit", handleSearchFormSubmit);
      }

      //Function to be called when DOM is ready
      function onDOMContentLoaded() {
        //Call functions
        attachQuickUpdateFormListeners();
        fetchAllComics();
        attachSearchFormListener();
      }

      //Add DOMContentLoaded event listener to document
      document.addEventListener("DOMContentLoaded", onDOMContentLoaded);

      //Event listener for submit on search form
      document
        .getElementById("search_form")
        .addEventListener("submit", handleSearchFormSubmit);
    </script>
  </body>
</html>
